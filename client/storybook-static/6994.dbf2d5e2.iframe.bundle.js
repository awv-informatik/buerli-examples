"use strict";(self.webpackChunkbuerli_examples_client=self.webpackChunkbuerli_examples_client||[]).push([[6994],{"./node_modules/raw-loader/dist/cjs.js!./src/solid/models/felge.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="import { ApiNoHistory, createPolyline, FilletPoint, Polyline } from '@buerli.io/headless'\r\nimport * as THREE from 'three'\r\n\r\nexport const create = async (api: ApiNoHistory) => {\r\n  const fp0: FilletPoint = { point: new THREE.Vector3(0, 200, 140), radius: 0 }\r\n  const fp1: FilletPoint = { point: new THREE.Vector3(0, 200, -73.676), radius: 0 }\r\n  const fp2: FilletPoint = { point: new THREE.Vector3(0, 80, -30), radius: 0 }\r\n  const fp3: FilletPoint = { point: new THREE.Vector3(0, 80, 0), radius: 0 }\r\n  const fp4: FilletPoint = { point: new THREE.Vector3(0, 0, 0), radius: 0 }\r\n  const fp5: FilletPoint = { point: new THREE.Vector3(0, 0, -55), radius: 0 }\r\n  const fp6: FilletPoint = { point: new THREE.Vector3(0, 30, -55), radius: 0 }\r\n  const fp7: FilletPoint = { point: new THREE.Vector3(0, 30, -50), radius: 0 }\r\n  const fp8: FilletPoint = { point: new THREE.Vector3(0, 80, -50), radius: 0 }\r\n  const fp9: FilletPoint = { point: new THREE.Vector3(0, 200, -93.676), radius: 0 }\r\n  const fp10: FilletPoint = { point: new THREE.Vector3(0, 200, -140), radius: 0 }\r\n  const fp11: FilletPoint = { point: new THREE.Vector3(0, 220, -140), radius: 0 }\r\n  const fp12: FilletPoint = { point: new THREE.Vector3(0, 220, -135), radius: 0 }\r\n  const fp13: FilletPoint = { point: new THREE.Vector3(0, 205, -135), radius: 0 }\r\n  const fp14: FilletPoint = { point: new THREE.Vector3(0, 205, 135), radius: 0 }\r\n  const fp15: FilletPoint = { point: new THREE.Vector3(0, 220, 135), radius: 0 }\r\n  const fp16: FilletPoint = { point: new THREE.Vector3(0, 220, 140), radius: 0 }\r\n  const polyline1: Polyline = createPolyline([\r\n    fp0,\r\n    fp1,\r\n    fp2,\r\n    fp3,\r\n    fp4,\r\n    fp5,\r\n    fp6,\r\n    fp7,\r\n    fp8,\r\n    fp9,\r\n    fp10,\r\n    fp11,\r\n    fp12,\r\n    fp13,\r\n    fp14,\r\n    fp15,\r\n    fp16,\r\n  ])\r\n  const fp20: FilletPoint = { point: new THREE.Vector3(-85, -10, -137.5), radius: 0 }\r\n  const fp21: FilletPoint = { point: new THREE.Vector3(-185, -36.795, -137.5), radius: 0 }\r\n  const fp22: FilletPoint = { point: new THREE.Vector3(-185, 36.795, -137.5), radius: 0 }\r\n  const fp23: FilletPoint = { point: new THREE.Vector3(-85, 10, -137.5), radius: 0 }\r\n  const polyline2: Polyline = createPolyline([fp20, fp21, fp22, fp23])\r\n  const basicBody = api.revolve([0, 0, 0], [0, 0, 100], 2 * Math.PI, polyline1)\r\n  const subSolid = api.extrude([0, 0, 500], polyline2)\r\n  const nof = 6\r\n  const angle = (2 * Math.PI) / nof\r\n  for (let i = 0; i < nof; i++) {\r\n    api.rotateTo(subSolid, [0, 0, i * angle])\r\n    api.subtract(basicBody, true, subSolid)\r\n  }\r\n  const basicBody2 = api.copy(basicBody)\r\n  api.mirror(basicBody2, [0, 0, 400], [0, 0, 1])\r\n  api.union(basicBody, false, basicBody2)\r\n  const basicBody3 = api.copy(basicBody)\r\n  api.mirror(basicBody3, [800, 0, 200], [1, 0, 0])\r\n  api.union(basicBody, false, basicBody3)\r\n  const geom = await api.createBufferGeometry(basicBody)\r\n  const mesh = new THREE.Mesh(\r\n    geom,\r\n    new THREE.MeshStandardMaterial({ transparent: true, opacity: 0.8, color: new THREE.Color('rgb(255, 0, 255)') }),\r\n  )\r\n  return [mesh]\r\n}\r\n\r\nexport default create\r\n"}}]);