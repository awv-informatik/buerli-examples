"use strict";(self.webpackChunkbuerli_examples_client=self.webpackChunkbuerli_examples_client||[]).push([[7294],{"./node_modules/raw-loader/dist/cjs.js!./src/history/models/As1_Assembly.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="import { FlipType, ReorientedType } from '@buerli.io/classcad'\r\nimport { ApiHistory } from '@buerli.io/headless'\r\nimport arraybuffer from '../../shared/resources/Bolt.of1'\r\nimport arraybuffer3 from '../../shared/resources/LBracket.of1'\r\nimport arraybuffer2 from '../../shared/resources/Nut.of1'\r\nimport arraybuffer4 from '../../shared/resources/Plate.of1'\r\nimport arraybuffer5 from '../../shared/resources/Rod.of1'\r\nimport { ParamType } from '../store'\r\n\r\nexport const create = async (api: ApiHistory, params?: ParamType) => {\r\n  const pt0 = { x: 0, y: 0, z: 0 }\r\n  const xDir = { x: 1, y: 0, z: 0 }\r\n  const yDir = { x: 0, y: 1, z: 0 }\r\n\r\n  /* Create different variables to control expressions */\r\n  const shaftDiameter = 10\r\n  const shaftLength = 42\r\n  const rodDiameter = shaftDiameter\r\n\r\n  /* Create root assembly */\r\n  const as1Asm = await api.createRootAssembly('Root_Assembly')\r\n\r\n  /* Create assembly templates */\r\n  const lBracketAsm = await api.createAssemblyAsTemplate('LBracket_Asm')\r\n  const nutBoltAsm = await api.createAssemblyAsTemplate('NutBolt_Asm')\r\n  const rodAsm = await api.createAssemblyAsTemplate('Rod_Asm')\r\n\r\n  /* Load Bolt part */\r\n  const bolt = await api.loadProduct(arraybuffer, 'of1')\r\n\r\n  /* Set expressions on bolt part (optional) */\r\n  api.setExpressions(\r\n    bolt[0],\r\n    { name: 'Shaft_Length', value: shaftLength },\r\n    { name: 'Shaft_Diameter', value: shaftDiameter },\r\n  )\r\n\r\n  /* Add bolt to nut-bolt assembly template */\r\n  const boltRefId = await api.addNode(bolt[0], nutBoltAsm, [pt0, xDir, yDir])\r\n\r\n  /* Get needed workcoordsystems of bolt */\r\n  const wcsIdBoltNut = await api.getWorkCoordSystem(boltRefId, 'WCS_Nut')\r\n  const wcsIdBoltHeadShaft = await api.getWorkCoordSystem(boltRefId, 'WCS_Head-Shaft')\r\n  const wcsIdBoltOrigin = await api.getWorkCoordSystem(boltRefId, 'WCS_Origin')\r\n\r\n  /* Load Nut part */\r\n  const nut = await api.loadProduct(arraybuffer2, 'of1')\r\n\r\n  /* Set expressions on bolt part (optional) */\r\n  api.setExpressions(nut[0], { name: 'Hole_Diameter', value: shaftDiameter })\r\n\r\n  /* Add nut to nut-bolt-assembly template */\r\n  const nutRefId = await api.addNode(nut[0], nutBoltAsm, [pt0, xDir, yDir])\r\n\r\n  /* Get needed workcoordsystems of nut */\r\n  const wcsIdNut = await api.getWorkCoordSystem(nutRefId, 'WCS_Hole_Top')\r\n\r\n  /* Set bolt to origin of nut-bolt-assembly */\r\n  await api.createFastenedOriginConstraint(\r\n    nutBoltAsm,\r\n    {\r\n      matePath: [boltRefId],\r\n      wcsId: wcsIdBoltOrigin[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    0,\r\n    0,\r\n    0,\r\n    'FOC0',\r\n  )\r\n\r\n  /* Set nut on bolt */\r\n  await api.createFastenedConstraint(\r\n    nutBoltAsm,\r\n    { matePath: [boltRefId], wcsId: wcsIdBoltNut[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    { matePath: [nutRefId], wcsId: wcsIdNut[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC1',\r\n  )\r\n\r\n  /* Load LBracket part */\r\n  const lBracket = await api.loadProduct(arraybuffer3, 'of1')\r\n\r\n  /* Set expressions on lBracket part (optional) */\r\n  api.setExpressions(\r\n    lBracket[0],\r\n    { name: 'Rod_Hole_Diameter', value: rodDiameter },\r\n    { name: 'Hole_Diameter', value: shaftDiameter },\r\n  )\r\n\r\n  /* Add lBracket to lbracket-assembly template */\r\n  const lBracketRef1 = await api.addNode(lBracket[0], lBracketAsm, [pt0, xDir, yDir])\r\n\r\n  /* Get needed workcoordsystems of lBracket */\r\n  const wcsIdLBracket1 = await api.getWorkCoordSystem(lBracketRef1, 'WCS_Hole1-Top')\r\n  const wcsIdLBracket2Top = await api.getWorkCoordSystem(lBracketRef1, 'WCS_Hole2-Top')\r\n  const wcsIdLBracket2Bottom = await api.getWorkCoordSystem(lBracketRef1, 'WCS_Hole2-Bottom')\r\n  const wcsIdLBracket3 = await api.getWorkCoordSystem(lBracketRef1, 'WCS_Hole3-Top')\r\n  const wcsIdLBracketRod = await api.getWorkCoordSystem(lBracketRef1, 'WCS_Rod')\r\n  const wcsIdLBracketOrigin = await api.getWorkCoordSystem(lBracketRef1, 'WCS_Origin')\r\n\r\n  /* Add nut-bolt assembly three times to lBracket-assembly template */\r\n  const nutBoltAsmRef1 = await api.addNode(nutBoltAsm, lBracketAsm, [pt0, xDir, yDir])\r\n  const nutBoltAsmRef2 = await api.addNode(nutBoltAsm, lBracketAsm, [pt0, xDir, yDir])\r\n  const nutBoltAsmRef3 = await api.addNode(nutBoltAsm, lBracketAsm, [pt0, xDir, yDir])\r\n\r\n  /* Set lBracket to origin of lBracket-assembly */\r\n  await api.createFastenedOriginConstraint(\r\n    lBracketAsm,\r\n    {\r\n      matePath: [lBracketRef1],\r\n      wcsId: wcsIdLBracketOrigin[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    0,\r\n    0,\r\n    0,\r\n    'FOC1',\r\n  )\r\n\r\n  /* Set 1st nut-bolt-assembly on lBracket */\r\n  await api.createFastenedConstraint(\r\n    lBracketAsm,\r\n    {\r\n      matePath: [lBracketRef1],\r\n      wcsId: wcsIdLBracket1[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    {\r\n      matePath: [nutBoltAsmRef1],\r\n      wcsId: wcsIdBoltHeadShaft[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC2',\r\n  )\r\n\r\n  /* Set 2nd nut-bolt-assembly on lBracket */\r\n  await api.createFastenedConstraint(\r\n    lBracketAsm,\r\n    {\r\n      matePath: [lBracketRef1],\r\n      wcsId: wcsIdLBracket2Top[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    {\r\n      matePath: [nutBoltAsmRef2],\r\n      wcsId: wcsIdBoltHeadShaft[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC3',\r\n  )\r\n\r\n  /* Set 3rd nut-bolt-assembly on lBracket */\r\n  await api.createFastenedConstraint(\r\n    lBracketAsm,\r\n    {\r\n      matePath: [lBracketRef1],\r\n      wcsId: wcsIdLBracket3[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    {\r\n      matePath: [nutBoltAsmRef3],\r\n      wcsId: wcsIdBoltHeadShaft[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC4',\r\n  )\r\n\r\n  /* Load Plate part */\r\n  const plate = await api.loadProduct(arraybuffer4, 'of1')\r\n\r\n  /* Set expressions on plate part (optional) */\r\n  api.setExpressions(plate[0], { name: 'Hole_Diameter', value: shaftDiameter })\r\n\r\n  /* Add nut to nut-bolt assembly template */\r\n  const plateRef = await api.addNode(plate[0], as1Asm, [pt0, xDir, yDir])\r\n\r\n  /* Get needed workcoordsystems of plate */\r\n  const wcsIdPlateBase = await api.getWorkCoordSystem(plateRef, 'WCS_Origin')\r\n  const wcsIdPlate2 = await api.getWorkCoordSystem(plateRef, 'WCS_Hole2-Top')\r\n  const wcsIdPlate5 = await api.getWorkCoordSystem(plateRef, 'WCS_Hole5-Top')\r\n\r\n  /* Set plate to origin of as1-assembly */\r\n  await api.createFastenedOriginConstraint(\r\n    as1Asm,\r\n    { matePath: [plateRef], wcsId: wcsIdPlateBase[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    0,\r\n    0,\r\n    0,\r\n    'FOC2',\r\n  )\r\n\r\n  /* Add nut to nut-bolt assembly template */\r\n  const lBracketAsmRef1 = await api.addNode(lBracketAsm, as1Asm, [pt0, xDir, yDir])\r\n  const lBracketAsmRef2 = await api.addNode(lBracketAsm, as1Asm, [pt0, xDir, yDir])\r\n\r\n  /* Set 1st lBracket-assembly on plate */\r\n  await api.createFastenedConstraint(\r\n    as1Asm,\r\n    { matePath: [plateRef], wcsId: wcsIdPlate2[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    {\r\n      matePath: [lBracketAsmRef1],\r\n      wcsId: wcsIdLBracket2Bottom[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC5',\r\n  )\r\n\r\n  /* Set 2nd lBracket-assembly on plate */\r\n  await api.createFastenedConstraint(\r\n    as1Asm,\r\n    { matePath: [plateRef], wcsId: wcsIdPlate5[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    {\r\n      matePath: [lBracketAsmRef2],\r\n      wcsId: wcsIdLBracket2Bottom[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC6',\r\n  )\r\n\r\n  /* Load Rod part */\r\n  const rod = await api.loadProduct(arraybuffer5, 'of1')\r\n\r\n  /* Set expressions on rod part (optional) */\r\n  api.setExpressions(rod[0], { name: 'Rod_Diameter', value: rodDiameter })\r\n\r\n  /* Add nut to nut-bolt assembly template */\r\n  const rodRefId = await api.addNode(rod[0], rodAsm, [pt0, xDir, yDir])\r\n\r\n  /* Get needed workcoordsystems of rod */\r\n  const wscIdRodLeft = await api.getWorkCoordSystem(rodRefId, 'WCS_Nut_Left')\r\n  const wcsIdRodRight = await api.getWorkCoordSystem(rodRefId, 'WCS_Nut_Right')\r\n  const wcsIdRodOrigin = await api.getWorkCoordSystem(rodRefId, 'WCS_Origin')\r\n\r\n  /* Add nut to nut-bolt assembly template */\r\n  const nutRefId1 = await api.addNode(nut[0], rodAsm, [pt0, xDir, yDir])\r\n  const nutRefId2 = await api.addNode(nut[0], rodAsm, [pt0, xDir, yDir])\r\n\r\n  /* Set rod to origin of rod-assembly */\r\n  await api.createFastenedOriginConstraint(\r\n    rodAsm,\r\n    { matePath: [rodRefId], wcsId: wcsIdRodOrigin[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    0,\r\n    0,\r\n    0,\r\n    'FOC3',\r\n  )\r\n\r\n  /* Set 1st nut on rod */\r\n  await api.createFastenedConstraint(\r\n    rodAsm,\r\n    { matePath: [rodRefId], wcsId: wscIdRodLeft[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    { matePath: [nutRefId1], wcsId: wcsIdNut[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC7',\r\n  )\r\n\r\n  /* Set 2nd nut on rod */\r\n  await api.createFastenedConstraint(\r\n    rodAsm,\r\n    { matePath: [rodRefId], wcsId: wcsIdRodRight[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    { matePath: [nutRefId2], wcsId: wcsIdNut[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC8',\r\n  )\r\n\r\n  /* Add nut to nut-bolt assembly template */\r\n  const rodAsmRef = await api.addNode(rodAsm, as1Asm, [pt0, xDir, yDir])\r\n\r\n  /* Set rod-assembly on lBracket of first lBracket-assembly */\r\n  await api.createFastenedConstraint(\r\n    as1Asm,\r\n    {\r\n      matePath: [lBracketAsmRef1],\r\n      wcsId: wcsIdLBracketRod[0],\r\n      flip: FlipType.FLIP_Z,\r\n      reoriented: ReorientedType.REORIENTED_0,\r\n    },\r\n    { matePath: [rodAsmRef], wcsId: wscIdRodLeft[0], flip: FlipType.FLIP_Z, reoriented: ReorientedType.REORIENTED_0 },\r\n    0,\r\n    0,\r\n    0,\r\n    'FC9',\r\n  )\r\n  return as1Asm\r\n}\r\n\r\nexport default create\r\n"}}]);