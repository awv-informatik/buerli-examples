"use strict";(self.webpackChunkbuerli_examples_client=self.webpackChunkbuerli_examples_client||[]).push([[6620],{"./node_modules/raw-loader/dist/cjs.js!./src/solid/models/lego.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="import { ApiNoHistory } from '@buerli.io/headless'\r\nimport * as THREE from 'three'\r\n\r\nexport const create = async (api: ApiNoHistory) => {\r\n  const rows = 2\r\n  const columns = 4\r\n  const unitLength = 8\r\n  const width = rows * unitLength\r\n  const length = columns * unitLength\r\n  const thickness = 1.6\r\n  const height = unitLength + thickness\r\n  const dotHeight = 1.7\r\n  const dotRadius = 2.4\r\n  const dotGap = dotRadius + thickness\r\n  const tubeHeight = height - thickness\r\n  const tubeRadius = (2 * dotGap * Math.sqrt(2) - 2 * dotRadius) / 2\r\n  // body\r\n  const basic = api.box(width, height, length)\r\n  const subBox = api.box(width - 2 * thickness, height - thickness, length - 2 * thickness)\r\n  api.moveTo(subBox, [0, -thickness, 0])\r\n  api.subtract(basic, false, subBox)\r\n  // dots\r\n  const dot = api.cylinder(dotHeight, 2 * dotRadius)\r\n  api.rotateTo(dot, [Math.PI / 2, 0, 0])\r\n  for (let i = 0; i < columns; i++) {\r\n    for (let j = 0; j < rows; j++) {\r\n      api.moveTo(dot, [\r\n        width / 2 - dotGap - j * (2 * dotGap),\r\n        (height + dotHeight) / 2,\r\n        length / 2 - dotGap - i * (2 * dotGap),\r\n      ])\r\n      api.union(basic, true, dot)\r\n    }\r\n  }\r\n  api.clearSolid(dot)\r\n  // tubes\r\n  if (rows > 1 && columns > 1) {\r\n    const tube = api.cylinder(tubeHeight, 2 * tubeRadius)\r\n    const subCyl = api.cylinder(tubeHeight, 2 * (tubeRadius - thickness))\r\n    api.subtract(tube, false, subCyl)\r\n    api.rotateTo(tube, [Math.PI / 2, 0, 0])\r\n    api.moveTo(tube, [0, -thickness / 2, 0])\r\n    for (let i = 0; i < columns - 1; i++) {\r\n      for (let j = 0; j < rows - 1; j++) {\r\n        api.moveTo(tube, [\r\n          width / 2 - 2 * dotGap - j * (2 * dotGap),\r\n          -thickness / 2,\r\n          length / 2 - 2 * dotGap - i * (2 * dotGap),\r\n        ])\r\n        api.union(basic, true, tube)\r\n      }\r\n    }\r\n    api.clearSolid(tube)\r\n  }\r\n  const geom = await api.createBufferGeometry(basic)\r\n  const mesh = new THREE.Mesh(\r\n    geom,\r\n    new THREE.MeshStandardMaterial({ transparent: true, opacity: 1, color: new THREE.Color('rgb(255, 0, 0)') }),\r\n  )\r\n  return [mesh]\r\n}\r\n\r\nexport default create\r\n"}}]);